// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title IStakingContract
 * @dev Interface for the staking contract.
 */
interface IStakingContract {
    /**
     * @dev Stake tokens.
     * @param staker The address of the user staking tokens.
     * @param amount The amount of tokens to stake.
     */
    function stakeTokens(address staker, uint256 amount) external;

    /**
     * @dev Unstake tokens.
     * @param staker The address of the user unstaking tokens.
     */
    function unstakeTokens(address staker) external;

    /**
     * @dev Generate reward tokens for a specific user.
     * @param recipient The address of the user receiving reward tokens.
     * @param amount The amount of reward tokens to generate.
     */
    function generateReward(address recipient, uint256 amount) external;
}

/**
 * @title AdobeHouse
 * @dev The AdobeHouse token contract.
 */
contract AdobeHouse {
    string public constant name = "AdobeHouse";
    string public constant symbol = "ADOBE";
    uint8 public constant decimals = 18;

    uint256 public constant MAX_SUPPLY = 1000000000 * 10**uint256(decimals);
    uint256 public constant PRESALE_SUPPLY = 100000000 * 10**uint256(decimals);

    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowances;
    uint256 private totalSupply_;

    address private contractOwner;
    address private stakingContract;
    address private newContractAddress; // New contract address for upgrade

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor() {
        contractOwner = msg.sender;
        balances[msg.sender] = PRESALE_SUPPLY;
        totalSupply_ = PRESALE_SUPPLY;
        emit Transfer(address(0), msg.sender, PRESALE_SUPPLY);
    }

    /**
     * @dev Returns the total supply of the token.
     */
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }

    /**
     * @dev Returns the balance of the specified account.
     * @param account The address to query the balance for.
     * @return The balance of the account.
     */
    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }

    /**
     * @dev Transfers tokens from the caller's account to the recipient's account.
     * @param recipient The address to transfer tokens to.
     * @param amount The amount of tokens to transfer.
     * @return True if the transfer is successful, false otherwise.
     */
    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Cannot transfer to zero address");
        require(balances[msg.sender] >= amount, "Insufficient balance");

        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        emit Transfer(msg.sender, recipient, amount);

        return true;
    }

    /**
     * @dev Returns the amount of tokens that the spender is allowed to spend on behalf of the owner.
     * @param ownerAddr The address that owns the tokens.
     * @param spender The address that is allowed to spend the tokens.
     * @return The remaining allowance for the spender.
     */
    function allowance(address ownerAddr, address spender) public view returns (uint256) {
        return allowances[ownerAddr][spender];
    }

    /**
     * @dev Approves the spender to spend a specified amount of tokens on behalf of the caller.
     * @param spender The address that is allowed to spend the tokens.
     * @param amount The amount of tokens the spender is allowed to spend.
     * @return True if the approval is successful, false otherwise.
     */
    function approve(address spender, uint256 amount) public returns (bool) {
        allowances[msg.sender][spender] = amount;
        emit Approval(msg.sender, spender, amount);
        return true;
    }
    
    /**
     * @dev Transfers tokens from the sender to the recipient using the allowance mechanism.
     * @param sender The address to transfer tokens from.
     * @param recipient The address to transfer tokens to.
     * @param amount The amount of tokens to transfer.
     * @return True if the transfer is successful, false otherwise.
     */
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(recipient != address(0), "Cannot transfer to zero address");
        require(balances[sender] >= amount, "Insufficient balance");
        require(allowances[sender][msg.sender] >= amount, "Insufficient allowance");

        balances[sender] -= amount;
        balances[recipient] += amount;
        allowances[sender][msg.sender] -= amount;

        emit Transfer(sender, recipient, amount);

        return true;
    }

    /**
     * @dev Sets the address of the staking contract.
     * @param _stakingContract The address of the staking contract.
     */
    function setStakingContract(address _stakingContract) external {
        require(_stakingContract != address(0), "Invalid staking contract address");
        require(msg.sender == contractOwner, "Only the contract owner can set the staking contract");

        stakingContract = _stakingContract;
    }

    /**
     * @dev Stakes a specified amount of tokens.
     * @param amount The amount of tokens to stake.
     */
    function stakeTokens(uint256 amount) external {
        require(stakingContract != address(0), "Staking contract not set");

        // Perform the transfer from the sender to the staking contract
        transfer(stakingContract, amount);

        // Call the stakeTokens function in the staking contract
        IStakingContract(stakingContract).stakeTokens(msg.sender, amount);
    }

    /**
     * @dev Unstakes tokens from the staking contract.
     */
    function unstakeTokens() external {
        require(stakingContract != address(0), "Staking contract not set");

        // Call the unstakeTokens function in the staking contract
        IStakingContract(stakingContract).unstakeTokens(msg.sender);
    }

    /**
     * @dev Generates reward tokens for the caller.
     * @param amount The amount of reward tokens to generate.
     */
    function generateReward(uint256 amount) external {
        require(stakingContract != address(0), "Staking contract not set");
        
        // Call the generateReward function in the staking contract
        IStakingContract(stakingContract).generateReward(msg.sender, amount);
    }

    /**
     * @dev Returns the address of the contract owner.
     */
    function getContractOwner() public view returns (address) {
        return contractOwner;
    }

    /**
     * @dev Allows the contract owner to sell tokens during the ICO period.
     * @param recipient The address to transfer the sold tokens to.
     * @param amount The amount of tokens to sell.
     */
    function sellTokens(address recipient, uint256 amount) external {
        require(msg.sender == contractOwner, "Only the contract owner can sell tokens");
        require(amount <= PRESALE_SUPPLY, "Not enough tokens available for sale");
        require(balances[contractOwner] >= amount, "Insufficient balance");

        balances[contractOwner] -= amount;
        balances[recipient] += amount;
        emit Transfer(contractOwner, recipient, amount);
    }

    /**
     * @dev Initiates the contract upgrade by setting the new contract address.
     * @param _newContractAddress The address of the new contract.
     */
    function initiateUpgrade(address _newContractAddress) external {
        require(msg.sender == contractOwner, "Only the contract owner can initiate an upgrade");
        require(_newContractAddress != address(0), "Invalid new contract address");

        newContractAddress = _newContractAddress;
    }

    /**
     * @dev Finalizes the contract upgrade by transferring balances and ownership to the new contract.
     */
    function finalizeUpgrade() external {
        require(msg.sender == contractOwner, "Only the contract owner can finalize the upgrade");
        require(newContractAddress != address(0), "No new contract address set");

        // Transfer balances to the new contract
        balances[newContractAddress] = balances[contractOwner];
        totalSupply_ = totalSupply_ - balances[contractOwner];

        // Transfer ownership to the new contract
        contractOwner = newContractAddress;

        emit Transfer(contractOwner, newContractAddress, balances[newContractAddress]);
    }
}

